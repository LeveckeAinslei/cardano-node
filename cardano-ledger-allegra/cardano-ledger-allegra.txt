-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Allegra ledger era that introduces time lock support.
--   
--   This package builds upon Shelley era with support for timelocks.
@package cardano-ledger-allegra
@version 1.2.3.1

module Cardano.Ledger.Allegra.Scripts
data Timelock era
pattern RequireSignature :: Era era => KeyHash 'Witness (EraCrypto era) -> Timelock era
pattern RequireAllOf :: Era era => StrictSeq (Timelock era) -> Timelock era
pattern RequireAnyOf :: Era era => StrictSeq (Timelock era) -> Timelock era
pattern RequireMOf :: Era era => Int -> StrictSeq (Timelock era) -> Timelock era
pattern RequireTimeExpire :: Era era => SlotNo -> Timelock era
pattern RequireTimeStart :: Era era => SlotNo -> Timelock era
pattern TimelockConstr :: () => MemoBytes TimelockRaw era -> Timelock era

-- | Test if a slot is in the Validity interval. Recall that a
--   ValidityInterval is a half Open interval, that is why we use (slot
--   &lt; top)
inInterval :: SlotNo -> ValidityInterval -> Bool
showTimelock :: Era era => Timelock era -> String
evalTimelock :: Era era => Set (KeyHash 'Witness (EraCrypto era)) -> ValidityInterval -> Timelock era -> Bool

-- | Check the equality of two underlying types, while ignoring their
--   binary representation, which <a>Eq</a> instance normally does. This is
--   used for testing.
eqTimelockRaw :: Timelock era -> Timelock era -> Bool

-- | ValidityInterval is a half open interval. Closed on the bottom, open
--   on the top. A SNothing on the bottom is negative infinity, and a
--   SNothing on the top is positive infinity
data ValidityInterval
ValidityInterval :: !StrictMaybe SlotNo -> !StrictMaybe SlotNo -> ValidityInterval
[invalidBefore] :: ValidityInterval -> !StrictMaybe SlotNo
[invalidHereafter] :: ValidityInterval -> !StrictMaybe SlotNo
encodeVI :: ValidityInterval -> Encode ('Closed 'Dense) ValidityInterval
decodeVI :: Decode ('Closed 'Dense) ValidityInterval

-- | This function deconstructs and then reconstructs the timelock script
--   to prove the compiler that we can arbirarily switch out the eras as
--   long as the cryptos for both eras are the same.
translateTimelock :: forall era1 era2. (Era era1, Era era2, EraCrypto era1 ~ EraCrypto era2) => Timelock era1 -> Timelock era2
instance Control.DeepSeq.NFData Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance NoThunks.Class.NoThunks Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance GHC.Show.Show Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance GHC.Generics.Generic Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance GHC.Classes.Eq Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance GHC.Classes.Ord Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance Control.DeepSeq.NFData (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance GHC.Classes.Eq (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance Cardano.Ledger.SafeHash.SafeToHash (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Control.DeepSeq.NFData (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Cardano.Ledger.Core.Era.Era era => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Data.Typeable.Internal.Typeable era => Cardano.Binary.ToCBOR.ToCBOR (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance GHC.Classes.Eq (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Cardano.Ledger.Core.Era.Era era => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance Cardano.Crypto.Hash.Class.HashAlgorithm (Cardano.Ledger.Crypto.HASH (Cardano.Ledger.Core.Era.EraCrypto era)) => GHC.Show.Show (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance Cardano.Crypto.Hash.Class.HashAlgorithm (Cardano.Ledger.Crypto.HASH (Cardano.Ledger.Core.Era.EraCrypto era)) => GHC.Show.Show (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.Scripts.Timelock era))
instance Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.Scripts.TimelockRaw era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.Scripts.TimelockRaw era))
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Cardano.Ledger.MemoBytes.Memoized Cardano.Ledger.Allegra.Scripts.Timelock
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.EraScript (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance Cardano.Ledger.MemoBytes.EqRaw (Cardano.Ledger.Allegra.Scripts.Timelock era)
instance Data.TreeDiff.Class.ToExpr Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR Cardano.Ledger.Allegra.Scripts.ValidityInterval
instance Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR Cardano.Ledger.Allegra.Scripts.ValidityInterval

module Cardano.Ledger.Allegra.Core
class ShelleyEraTxBody era => AllegraEraTxBody era
vldtTxBodyL :: AllegraEraTxBody era => Lens' (TxBody era) ValidityInterval

module Cardano.Ledger.Allegra.TxAuxData
data AllegraTxAuxData era
pattern AllegraTxAuxData :: Era era => Map Word64 Metadatum -> StrictSeq (Timelock era) -> AllegraTxAuxData era

-- | <i>Deprecated: Use <a>AllegraTxAuxData</a> instead</i>
type AuxiliaryData = AllegraTxAuxData
instance GHC.Classes.Eq (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Cardano.Ledger.SafeHash.SafeToHash (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Data.Typeable.Internal.Typeable era => Cardano.Binary.ToCBOR.ToCBOR (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance GHC.Classes.Eq (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Cardano.Crypto.Hash.Class.HashAlgorithm (Cardano.Ledger.Crypto.HASH (Cardano.Ledger.Core.Era.EraCrypto era)) => GHC.Show.Show (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Cardano.Ledger.Core.Era.Era era => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Cardano.Crypto.Hash.Class.HashAlgorithm (Cardano.Ledger.Crypto.HASH (Cardano.Ledger.Core.Era.EraCrypto era)) => GHC.Show.Show (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Cardano.Ledger.Core.Era.Era era => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Control.DeepSeq.NFData (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era))
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.EraTxAuxData (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Cardano.Ledger.MemoBytes.Memoized Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData
instance (c GHC.Types.~ Cardano.Ledger.Core.Era.EraCrypto era) => Cardano.Ledger.SafeHash.HashAnnotated (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era) Cardano.Ledger.Hashes.EraIndependentTxAuxData c
instance Cardano.Ledger.MemoBytes.EqRaw (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxData era)
instance Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Control.DeepSeq.NFData (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.TxAuxData.AllegraTxAuxDataRaw era))

module Cardano.Ledger.Allegra.TxBody
data AllegraTxBody e

-- | A pattern to keep the newtype and the MemoBytes hidden
pattern AllegraTxBody :: (EraTxOut era, EraTxCert era) => Set (TxIn (EraCrypto era)) -> StrictSeq (TxOut era) -> StrictSeq (TxCert era) -> Withdrawals (EraCrypto era) -> Coin -> ValidityInterval -> StrictMaybe (Update era) -> StrictMaybe (AuxiliaryDataHash (EraCrypto era)) -> AllegraTxBody era
class ShelleyEraTxBody era => AllegraEraTxBody era
vldtTxBodyL :: AllegraEraTxBody era => Lens' (TxBody era) ValidityInterval
emptyAllegraTxBodyRaw :: Monoid ma => AllegraTxBodyRaw ma era
data AllegraTxBodyRaw ma era
AllegraTxBodyRaw :: !Set (TxIn (EraCrypto era)) -> !StrictSeq (TxOut era) -> !StrictSeq (TxCert era) -> !Withdrawals (EraCrypto era) -> !Coin -> !ValidityInterval -> !StrictMaybe (Update era) -> !StrictMaybe (AuxiliaryDataHash (EraCrypto era)) -> !ma -> AllegraTxBodyRaw ma era
[atbrInputs] :: AllegraTxBodyRaw ma era -> !Set (TxIn (EraCrypto era))
[atbrOutputs] :: AllegraTxBodyRaw ma era -> !StrictSeq (TxOut era)
[atbrCerts] :: AllegraTxBodyRaw ma era -> !StrictSeq (TxCert era)
[atbrWithdrawals] :: AllegraTxBodyRaw ma era -> !Withdrawals (EraCrypto era)
[atbrTxFee] :: AllegraTxBodyRaw ma era -> !Coin
[atbrValidityInterval] :: AllegraTxBodyRaw ma era -> !ValidityInterval
[atbrUpdate] :: AllegraTxBodyRaw ma era -> !StrictMaybe (Update era)
[atbrAuxDataHash] :: AllegraTxBodyRaw ma era -> !StrictMaybe (AuxiliaryDataHash (EraCrypto era))
[atbrMint] :: AllegraTxBodyRaw ma era -> !ma
data () => StrictMaybe a
SNothing :: StrictMaybe a
SJust :: !a -> StrictMaybe a

-- | ValidityInterval is a half open interval. Closed on the bottom, open
--   on the top. A SNothing on the bottom is negative infinity, and a
--   SNothing on the top is positive infinity
data ValidityInterval
ValidityInterval :: !StrictMaybe SlotNo -> !StrictMaybe SlotNo -> ValidityInterval
[invalidBefore] :: ValidityInterval -> !StrictMaybe SlotNo
[invalidHereafter] :: ValidityInterval -> !StrictMaybe SlotNo
instance Data.Typeable.Internal.Typeable e => Cardano.Binary.ToCBOR.ToCBOR (Cardano.Ledger.Allegra.TxBody.AllegraTxBody e)
instance Cardano.Ledger.SafeHash.SafeToHash (Cardano.Ledger.Allegra.TxBody.AllegraTxBody e)
instance (Cardano.Ledger.Core.Era.Era era, Control.DeepSeq.NFData (Cardano.Ledger.Core.TxOut era), Control.DeepSeq.NFData (Cardano.Ledger.Core.TxCert.TxCert era), Control.DeepSeq.NFData (Cardano.Ledger.Core.PParams.PParamsUpdate era), Control.DeepSeq.NFData ma) => Control.DeepSeq.NFData (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance (Cardano.Ledger.Core.Era.Era era, GHC.Classes.Eq (Cardano.Ledger.Core.PParams.PParamsUpdate era), GHC.Classes.Eq (Cardano.Ledger.Core.TxOut era), GHC.Classes.Eq (Cardano.Ledger.Core.TxCert.TxCert era), GHC.Classes.Eq ma) => GHC.Classes.Eq (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance (Cardano.Ledger.Core.Era.Era era, GHC.Show.Show (Cardano.Ledger.Core.TxOut era), GHC.Show.Show (Cardano.Ledger.Core.TxCert.TxCert era), GHC.Show.Show (Cardano.Ledger.Core.PParams.PParamsUpdate era), GHC.Show.Show ma) => GHC.Show.Show (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance (Cardano.Ledger.Core.Era.Era era, NoThunks.Class.NoThunks (Cardano.Ledger.Core.TxOut era), NoThunks.Class.NoThunks (Cardano.Ledger.Core.TxCert.TxCert era), NoThunks.Class.NoThunks (Cardano.Ledger.Core.PParams.PParamsUpdate era), NoThunks.Class.NoThunks ma) => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance (Cardano.Ledger.Core.Era.Era era, GHC.Classes.Eq (Cardano.Ledger.Core.PParams.PParamsUpdate era), GHC.Classes.Eq (Cardano.Ledger.Core.TxOut era), GHC.Classes.Eq (Cardano.Ledger.Core.TxCert.TxCert era)) => GHC.Classes.Eq (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance (Cardano.Ledger.Core.Era.Era era, GHC.Show.Show (Cardano.Ledger.Core.TxOut era), GHC.Show.Show (Cardano.Ledger.Core.TxCert.TxCert era), Cardano.Ledger.Compactible.Compactible (Cardano.Ledger.Core.Value era), GHC.Show.Show (Cardano.Ledger.Core.PParams.PParamsUpdate era)) => GHC.Show.Show (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance GHC.Generics.Generic (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance (Cardano.Ledger.Core.Era.Era era, NoThunks.Class.NoThunks (Cardano.Ledger.Core.TxOut era), NoThunks.Class.NoThunks (Cardano.Ledger.Core.TxCert.TxCert era), NoThunks.Class.NoThunks (Cardano.Ledger.Core.PParams.PParamsUpdate era)) => NoThunks.Class.NoThunks (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance (Control.DeepSeq.NFData (Cardano.Ledger.Core.TxOut era), Control.DeepSeq.NFData (Cardano.Ledger.Core.TxCert.TxCert era), Control.DeepSeq.NFData (Cardano.Ledger.Core.PParams.PParamsUpdate era), Cardano.Ledger.Core.Era.Era era) => Control.DeepSeq.NFData (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance Cardano.Ledger.Allegra.Core.AllegraEraTxBody era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era))
instance Cardano.Ledger.MemoBytes.Memoized Cardano.Ledger.Allegra.TxBody.AllegraTxBody
instance (Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Core.TxOut era), Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Core.TxCert.TxCert era), Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Shelley.PParams.Update era)) => Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance Cardano.Ledger.Core.Era.Era era => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance (c GHC.Types.~ Cardano.Ledger.Core.Era.EraCrypto era, Cardano.Ledger.Core.Era.Era era) => Cardano.Ledger.SafeHash.HashAnnotated (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era) Cardano.Ledger.Hashes.EraIndependentTxBody c
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.EraTxBody (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance (Cardano.Ledger.Core.Era.Era era, GHC.Classes.Eq (Cardano.Ledger.Core.PParams.PParamsUpdate era), GHC.Classes.Eq (Cardano.Ledger.Core.TxOut era), GHC.Classes.Eq (Cardano.Ledger.Core.TxCert.TxCert era)) => Cardano.Ledger.MemoBytes.EqRaw (Cardano.Ledger.Allegra.TxBody.AllegraTxBody era)
instance (Data.TreeDiff.Class.ToExpr ma, Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Core.TxOut era), Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Core.TxCert.TxCert era), Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Shelley.PParams.Update era)) => Data.TreeDiff.Class.ToExpr (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance (Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR ma, GHC.Base.Monoid ma, Cardano.Ledger.Allegra.Core.AllegraEraTxBody era) => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance Cardano.Ledger.Allegra.Core.AllegraEraTxBody era => Cardano.Ledger.Binary.Decoding.DecCBOR.DecCBOR (Cardano.Ledger.Binary.Decoding.Annotated.Annotator (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw () era))
instance (Cardano.Ledger.Core.EraTxOut era, Cardano.Ledger.Core.TxCert.EraTxCert era, GHC.Classes.Eq ma, Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR ma, GHC.Base.Monoid ma) => Cardano.Ledger.Binary.Encoding.EncCBOR.EncCBOR (Cardano.Ledger.Allegra.TxBody.AllegraTxBodyRaw ma era)
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Shelley.Core.ShelleyEraTxBody (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Allegra.Core.AllegraEraTxBody (Cardano.Ledger.Allegra.Era.AllegraEra c)

module Cardano.Ledger.Allegra.Rules
data AllegraUTXO era
data AllegraUtxoEvent era
UpdateEvent :: Event (EraRule "PPUP" era) -> AllegraUtxoEvent era
TotalDeposits :: SafeHash (EraCrypto era) EraIndependentTxBody -> Coin -> AllegraUtxoEvent era
data AllegraUtxoPredFailure era
BadInputsUTxO :: !Set (TxIn (EraCrypto era)) -> AllegraUtxoPredFailure era
OutsideValidityIntervalUTxO :: !ValidityInterval -> !SlotNo -> AllegraUtxoPredFailure era
MaxTxSizeUTxO :: !Integer -> !Integer -> AllegraUtxoPredFailure era
InputSetEmptyUTxO :: AllegraUtxoPredFailure era
FeeTooSmallUTxO :: !Coin -> !Coin -> AllegraUtxoPredFailure era
ValueNotConservedUTxO :: !Value era -> !Value era -> AllegraUtxoPredFailure era
WrongNetwork :: !Network -> !Set (Addr (EraCrypto era)) -> AllegraUtxoPredFailure era
WrongNetworkWithdrawal :: !Network -> !Set (RewardAcnt (EraCrypto era)) -> AllegraUtxoPredFailure era
OutputTooSmallUTxO :: ![TxOut era] -> AllegraUtxoPredFailure era
UpdateFailure :: !PPUPPredFailure era -> AllegraUtxoPredFailure era
OutputBootAddrAttrsTooBig :: ![TxOut era] -> AllegraUtxoPredFailure era
TriesToForgeADA :: AllegraUtxoPredFailure era
OutputTooBigUTxO :: ![TxOut era] -> AllegraUtxoPredFailure era

-- | Ensure the transaction is within the validity window.
--   
--   <pre>
--   ininterval slot (txvld tx)
--   </pre>
validateOutsideValidityIntervalUTxO :: AllegraEraTxBody era => SlotNo -> TxBody era -> Test (AllegraUtxoPredFailure era)
data AllegraUTXOW era

module Cardano.Ledger.Allegra.Tx
validateTimelock :: (EraTx era, AllegraEraTxBody era) => Tx era -> Timelock era -> Bool
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.EraTx (Cardano.Ledger.Allegra.Era.AllegraEra c)

module Cardano.Ledger.Allegra.Translation

-- | Return the subset of UTxO corresponding to Byron-era AVVM addresses,
--   which are to be removed on the Shelley/Allegra boundary. This set will
--   be passed _back_ to the translation functions as the UTxO, allowing
--   these addresses to be removed. This is needed because we cannot do a
--   full scan on the UTxO at this point, since it has been persisted to
--   disk.
shelleyToAllegraAVVMsToDelete :: NewEpochState (ShelleyEra c) -> UTxO (ShelleyEra c)
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.LedgerState.Types.NewEpochState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.Tx.ShelleyTx
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Core.PParams.PParams
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Core.PParams.PParamsUpdate
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.PParams.ProposedPPUpdates
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.Governance.ShelleyGovState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.TxOut.ShelleyTxOut
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.UTxO.UTxO
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.LedgerState.Types.UTxOState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.CertState.DState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.CertState.CommitteeState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.CertState.VState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.CertState.PState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.CertState.CertState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.LedgerState.Types.LedgerState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.LedgerState.Types.EpochState
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.TxWits.ShelleyTxWits
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Core.Translation.TranslateEra (Cardano.Ledger.Allegra.Era.AllegraEra c) Cardano.Ledger.Shelley.PParams.Update

module Cardano.Ledger.Allegra.Transition
data family TransitionConfig era
instance Cardano.Ledger.Crypto.Crypto c => Data.Aeson.Types.FromJSON.FromJSON (Cardano.Ledger.Shelley.Transition.TransitionConfig (Cardano.Ledger.Allegra.Era.AllegraEra c))
instance Cardano.Ledger.Crypto.Crypto c => Data.Aeson.Types.ToJSON.ToJSON (Cardano.Ledger.Shelley.Transition.TransitionConfig (Cardano.Ledger.Allegra.Era.AllegraEra c))
instance Cardano.Ledger.Crypto.Crypto c => NoThunks.Class.NoThunks (Cardano.Ledger.Shelley.Transition.TransitionConfig (Cardano.Ledger.Allegra.Era.AllegraEra c))
instance Cardano.Ledger.Crypto.Crypto c => GHC.Classes.Eq (Cardano.Ledger.Shelley.Transition.TransitionConfig (Cardano.Ledger.Allegra.Era.AllegraEra c))
instance Cardano.Ledger.Crypto.Crypto c => GHC.Show.Show (Cardano.Ledger.Shelley.Transition.TransitionConfig (Cardano.Ledger.Allegra.Era.AllegraEra c))
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Shelley.Transition.EraTransition (Cardano.Ledger.Allegra.Era.AllegraEra c)

module Cardano.Ledger.Allegra
type Allegra = AllegraEra StandardCrypto

-- | The Allegra era
data AllegraEra c
instance (Cardano.Ledger.Crypto.Crypto c, Cardano.Ledger.Keys.DSignable c (Cardano.Ledger.Keys.Hash c Cardano.Ledger.Hashes.EraIndependentTxBody)) => Cardano.Ledger.Shelley.API.Mempool.ApplyTx (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance (Cardano.Ledger.Crypto.Crypto c, Cardano.Ledger.Keys.DSignable c (Cardano.Ledger.Keys.Hash c Cardano.Ledger.Hashes.EraIndependentTxBody)) => Cardano.Ledger.Shelley.API.Validation.ApplyBlock (Cardano.Ledger.Allegra.Era.AllegraEra c)
instance Cardano.Ledger.Crypto.Crypto c => Cardano.Ledger.Shelley.API.Genesis.CanStartFromGenesis (Cardano.Ledger.Allegra.Era.AllegraEra c)
